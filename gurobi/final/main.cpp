#include <iostream>
//#include "k_optimization.hpp"
//#include "graph_utils.hpp"
#include "utils.hpp"

using namespace std;
using namespace arma;

int main() {
	// Weighted adjacency matrix
	mat A;

	A
	//<< 0 << 3 << 5 << 0 << 0 << 10 << endr
	//<< 3 << 0 << 4 << 0 << 0 << 0 << endr
	//<< 5 << 4 << 0 << 6 << 0 << 0 << endr
	//<< 0 << 0 << 6 << 0 << 1 << 2 << endr
	//<< 0 << 0 << 0 << 1 << 0 << 3 << endr
	//<< 10 << 0 << 0 << 2 << 3 << 0 << endr;
	<< 0 << 2 << 0 << 0 << 4 << endr
	<< 2 << 0 << 7 << 0 << 1 << endr
	<< 0 << 7 << 0 << 1 << 3 << endr
	<< 0 << 0 << 1 << 0 << 2 << endr
	<< 4 << 1 << 3 << 2 << 0 << endr;
	//<< 0 << 1.5325 << 0.5923 << 1.6290 << 0.9502 << 3.3429 << 1.7797 << 1.4341 << 1.7151 << 0.9494 << 0.8808 << 2.5825 << 2.3982 << 3.0047 << 1.9961 << endr
	//<< 1.5325 << 0 << 1.4780 << 2.6164 << 0.5823 << 1.8442 << 0.4765 << 2.2311 << 2.3817 << 1.5812 << 1.7523 << 1.0505 << 2.7016 << 3.5470 << 2.8260 << endr
	//<< 0.5923 << 1.4780 << 0 << 1.2194 << 0.9646 << 3.1352 << 1.5633 << 0.9247 << 2.2973 << 1.4873 << 1.4564 << 2.4898 << 2.9533 << 3.5909 << 2.5884 << endr
	//<< 1.6290 << 2.6164 << 1.2194 << 0 << 2.1654 << 4.0294 << 2.5647 << 0.4248 << 3.2596 << 2.5743 << 2.4733 << 3.5430 << 3.9922 << 4.4976 << 3.4364 << endr
	//<< 0.9502 << 0.5823 << 0.9646 << 2.1654 << 0 << 2.4079 << 0.8876 << 1.8178 << 2.0234 << 1.1602 << 1.2852 << 1.6326 << 2.4849 << 3.2710 << 2.4345 << endr
	//<< 3.3429 << 1.8442 << 3.1352 << 4.0294 << 2.4079 << 0 << 1.5792 << 3.6049 << 4.0879 << 3.3778 << 3.5702 << 0.9113 << 4.2030 << 5.0873 << 4.5509 << endr
	//<< 1.7797 << 0.4765 << 1.5633 << 2.5647 << 0.8876 << 1.5792 << 0 << 2.1517 << 2.8338 << 2.0060 << 2.1564 << 0.9802 << 3.1770 << 4.0184 << 3.2693 << endr
	//<< 1.4341 << 2.2311 << 0.9247 << 0.4248 << 1.8178 << 3.6049 << 2.1517 << 0 << 3.1331 << 2.3787 << 2.3116 << 3.1316 << 3.8321 << 4.4056 << 3.3623 << endr
	//<< 1.7151 << 2.3817 << 2.2973 << 3.2596 << 2.0234 << 4.0879 << 2.8338 << 3.1331 << 0 << 0.8751 << 0.8421 << 3.1806 << 0.7762 << 1.2963 << 0.4654 << endr
	//<< 0.9494 << 1.5812 << 1.4873 << 2.5743 << 1.1602 << 3.3778 << 2.0060 << 2.3787 << 0.8751 << 0 << 0.2300 << 2.4965 << 1.4666 << 2.1579 << 1.2743 << endr
	//<< 0.8808 << 1.7523 << 1.4564 << 2.4733 << 1.2852 << 3.5702 << 2.1564 << 2.3116 << 0.8421 << 0.2300 << 0 << 2.6987 << 1.5229 << 2.1380 << 1.1808 << endr
	//<< 2.5825 << 1.0505 << 2.4898 << 3.5430 << 1.6326 << 0.9113 << 0.9802 << 3.1316 << 3.1806 << 2.4965 << 2.6987 << 0 << 3.2979 << 4.1815 << 3.6446 << endr
	//<< 2.3982 << 2.7016 << 2.9533 << 3.9922 << 2.4849 << 4.2030 << 3.1770 << 3.8321 << 0.7762 << 1.4666 << 1.5229 << 3.2979 << 0 << 0.8845 << 0.9246 << endr
	//<< 3.0047 << 3.5470 << 3.5909 << 4.4976 << 3.2710 << 5.0873 << 4.0184 << 4.4056 << 1.2963 << 2.1579 << 2.1380 << 4.1815 << 0.8845 << 0 << 1.0671 << endr
	//<< 1.9961 << 2.8260 << 2.5884 << 3.4364 << 2.4345 << 4.5509 << 3.2693 << 3.3623 << 0.4654 << 1.2743 << 1.1808 << 3.6446 << 0.9246 << 1.0671 << 0 << endr;


	//int depth;

	//scanf("%d",&depth);

	// Subgraphs set
	//umat S = zeros<umat>(1,depth);

	// Generate all connected subgraphs with size = depth
	//subgraph(S,A,depth);

	//cout << "s:\n" << S << endl;

	//cout << mst_optimization(A);
	//cout << "A:\n" << A << "\n2-minA:\n" << k2_optimization(A) << endl;

	//vector<int> v(5);
	//vector<int> v2(5);

	//v[0] = 1;
	//v[1] = 2;
	//v[2] = 3;
	//v[3] = 55;
	//v[4] = 14;

	//v2[3] = 1;
	//v2[0] = 2;
	//v2[4] = 3;
	//v2[1] = 55;
	//v2[2] = 14;

	//cout << "1 == 2:" << (v == v2) << endl;

	////show_vec(v);
	//std::sort(v.begin(),v.end());
	//std::sort(v2.begin(),v2.end());
	////show_vec(v);

	//cout << "1 == 2:" << (v == v2) << endl;

	//unsigned int pose = 0;
	//int value;

	//scanf("%d",&value);

	//cout << "exist:" << find_value(value,v,pose) << endl;
	//cout << "pose:" << pose << endl;

	double **vet = create2D<double>(3,3);

	vet[0][2] = 1;
	vet[0][1] = 12;
	vet[0][0] = 14;

	for(int i=0; i<3; i++) {
		for(int j=0;j<3;j++){
			cout << vet[i][j] << " ";
		}
		cout << endl;
	}


	return 0;
}



